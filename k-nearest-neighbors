def euclid_dist(p1, p2):
    if type(p1) == type(p2) == tuple:
        sum = 0
        for i in range(len(p1)):
            sum += (p2[i] - p1[i])**2
        return sum**(1/2)
    else:
        return abs(p2-p1)

def most_common(lst):
    return max(set(lst), key=lst.count)

dict1 = {
        (1,1): 'red',
        (2,3): 'blue',
        (3,2.5): 'green',
        (4,4.25): 'blue'
    }
point = (3,4)
k = 2

def knn(dict1, point, k):
    distance_list = []
    for key in list(dict1.keys()):
        distance_list.append(euclid_dist(point,key))
    unsorted_distance_list = []
    for element in distance_list:
        unsorted_distance_list.append(element)
    distance_list.sort()
    sorted_nearest_neighbors_list = []
    for i in range(k):
        sorted_nearest_neighbors_list.append(dict1.get(list(dict1)[unsorted_distance_list.index(distance_list[i])]))
    if len(sorted_nearest_neighbors_list) == len(set(sorted_nearest_neighbors_list)):
        return sorted_nearest_neighbors_list[0]
    else:
        return most_common(sorted_nearest_neighbors_list)
